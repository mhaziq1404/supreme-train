import express from "express";
import { config } from "dotenv";
import {
  createThirdwebClient,
  sendAndConfirmTransaction,
  getContract,
  ContractOptions,
  prepareContractCall,
  ThirdwebClient,
  defineChain,
} from "thirdweb";
import { Account, privateKeyToAccount } from "thirdweb/wallets";
import { deployContract } from "thirdweb/deploys";
import { Abi } from "viem";


config();
const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3333;
const chain = defineChain(534351);

let client: ThirdwebClient, contract: ContractOptions<Abi>;
let account: Account;
let contractAbi: Abi;

// Initialize the contract
const initContract = async () => {
  if (!process.env.WALLET_PRIVATE_KEY || !process.env.THIRDWEB_SECRET_KEY) {
    throw new Error("No private key or THIRDWEB_SECRET_KEY found");
  }

  try {

    // Create a client using the secret key
    client = createThirdwebClient({
      secretKey: process.env.THIRDWEB_SECRET_KEY,
    });

    // Create an account using the private key
    account = privateKeyToAccount({
      client,
      privateKey: process.env.WALLET_PRIVATE_KEY,
    });

    contractAbi = [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "string",
            "name": "player1",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "player2",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "score1",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "score2",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "winner",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "name": "GameResultStored",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "gameResults",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "player1",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "player2",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "score1",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "score2",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "winner",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "getGameResultsById",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "gameId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "player1",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "player2",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "score1",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "score2",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "winner",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "username",
            "type": "string"
          }
        ],
        "name": "getGameResultsByUsername",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "player1s",
            "type": "string[]"
          },
          {
            "internalType": "string[]",
            "name": "player2s",
            "type": "string[]"
          },
          {
            "internalType": "uint256[]",
            "name": "score1s",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "score2s",
            "type": "uint256[]"
          },
          {
            "internalType": "string[]",
            "name": "winners",
            "type": "string[]"
          },
          {
            "internalType": "uint256[]",
            "name": "timestamps",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getGameResultsCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_player1",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_player2",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "_score1",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_score2",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_winner",
            "type": "string"
          }
        ],
        "name": "storeGameResult",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ]

    let response;
    let address;

    while (!response) {
      try {
        response = await fetch('http://base:8000/api/matches/get-contract-address');
        if (response.ok) {
          const data = await response.json();
          console.log(data);
          if (!data.address)
            break;
          address = data.address;
        } else {
          console.error("Failed to fetch contract address, retrying...");
        }
      } catch (err) {
        console.error("Error fetching contract address, retrying...", err);
      }
      if (!address) {
        await new Promise(resolve => setTimeout(resolve, 5000)); // Wait for 1 second before retrying
      }
    }

    if (!address) {
      address = await deployContract({
        client,
        chain,
        bytecode: "0x6080604052348015600e575f80fd5b50611b5a8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80636eabe1e1146100595780638f106e961461008f578063a9b606d2146100ad578063ce83661b146100e3578063fdba1b7c146100ff575b5f80fd5b610073600480360381019061006e9190611041565b610135565b6040516100869796959493929190611263565b60405180910390f35b610097610835565b6040516100a49190611310565b60405180910390f35b6100c760048036038101906100c29190611353565b610840565b6040516100da97969594939291906113c6565b60405180910390f35b6100fd60048036038101906100f89190611448565b610b11565b005b61011960048036038101906101149190611353565b610d16565b60405161012c97969594939291906113c6565b60405180910390f35b60608060608060608060605f805b5f805490508110156101f75789805190602001205f828154811061016a57610169611525565b5b905f5260205f209060070201600101604051610186919061164b565b604051809103902014806101d6575089805190602001205f82815481106101b0576101af611525565b5b905f5260205f2090600702016002016040516101cc919061164b565b6040518091039020145b156101ea5781806101e69061168e565b9250505b8080600101915050610143565b508067ffffffffffffffff81111561021257610211610f1d565b5b6040519080825280602002602001820160405280156102405781602001602082028036833780820191505090505b5097508067ffffffffffffffff81111561025d5761025c610f1d565b5b60405190808252806020026020018201604052801561029057816020015b606081526020019060019003908161027b5790505b5096508067ffffffffffffffff8111156102ad576102ac610f1d565b5b6040519080825280602002602001820160405280156102e057816020015b60608152602001906001900390816102cb5790505b5095508067ffffffffffffffff8111156102fd576102fc610f1d565b5b60405190808252806020026020018201604052801561032b5781602001602082028036833780820191505090505b5094508067ffffffffffffffff81111561034857610347610f1d565b5b6040519080825280602002602001820160405280156103765781602001602082028036833780820191505090505b5093508067ffffffffffffffff81111561039357610392610f1d565b5b6040519080825280602002602001820160405280156103c657816020015b60608152602001906001900390816103b15790505b5092508067ffffffffffffffff8111156103e3576103e2610f1d565b5b6040519080825280602002602001820160405280156104115781602001602082028036833780820191505090505b5091505f805b5f80549050811015610827578a805190602001205f828154811061043e5761043d611525565b5b905f5260205f20906007020160010160405161045a919061164b565b604051809103902014806104aa57508a805190602001205f828154811061048457610483611525565b5b905f5260205f2090600702016002016040516104a0919061164b565b6040518091039020145b1561081a575f81815481106104c2576104c1611525565b5b905f5260205f2090600702015f01548a83815181106104e4576104e3611525565b5b6020026020010181815250505f818154811061050357610502611525565b5b905f5260205f209060070201600101805461051d9061157f565b80601f01602080910402602001604051908101604052809291908181526020018280546105499061157f565b80156105945780601f1061056b57610100808354040283529160200191610594565b820191905f5260205f20905b81548152906001019060200180831161057757829003601f168201915b50505050508983815181106105ac576105ab611525565b5b60200260200101819052505f81815481106105ca576105c9611525565b5b905f5260205f20906007020160020180546105e49061157f565b80601f01602080910402602001604051908101604052809291908181526020018280546106109061157f565b801561065b5780601f106106325761010080835404028352916020019161065b565b820191905f5260205f20905b81548152906001019060200180831161063e57829003601f168201915b505050505088838151811061067357610672611525565b5b60200260200101819052505f818154811061069157610690611525565b5b905f5260205f209060070201600301548783815181106106b4576106b3611525565b5b6020026020010181815250505f81815481106106d3576106d2611525565b5b905f5260205f209060070201600401548683815181106106f6576106f5611525565b5b6020026020010181815250505f818154811061071557610714611525565b5b905f5260205f209060070201600501805461072f9061157f565b80601f016020809104026020016040519081016040528092919081815260200182805461075b9061157f565b80156107a65780601f1061077d576101008083540402835291602001916107a6565b820191905f5260205f20905b81548152906001019060200180831161078957829003601f168201915b50505050508583815181106107be576107bd611525565b5b60200260200101819052505f81815481106107dc576107db611525565b5b905f5260205f209060070201600601548483815181106107ff576107fe611525565b5b60200260200101818152505081806108169061168e565b9250505b8080600101915050610417565b505050919395979092949650565b5f8080549050905090565b5f6060805f8060605f805f90505b5f80549050811015610aca57885f828154811061086e5761086d611525565b5b905f5260205f2090600702015f015403610abd575f80828154811061089657610895611525565b5b905f5260205f2090600702016040518060e00160405290815f82015481526020016001820180546108c69061157f565b80601f01602080910402602001604051908101604052809291908181526020018280546108f29061157f565b801561093d5780601f106109145761010080835404028352916020019161093d565b820191905f5260205f20905b81548152906001019060200180831161092057829003601f168201915b505050505081526020016002820180546109569061157f565b80601f01602080910402602001604051908101604052809291908181526020018280546109829061157f565b80156109cd5780601f106109a4576101008083540402835291602001916109cd565b820191905f5260205f20905b8154815290600101906020018083116109b057829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820180546109fa9061157f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a269061157f565b8015610a715780601f10610a4857610100808354040283529160200191610a71565b820191905f5260205f20905b815481529060010190602001808311610a5457829003601f168201915b505050505081526020016006820154815250509050805f015181602001518260400151836060015184608001518560a001518660c0015198509850985098509850985098505050610b06565b808060010191505061084e565b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd9061171f565b60405180910390fd5b919395979092949650565b5f8551118015610b2157505f8451115b610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5790611787565b60405180910390fd5b848051906020012081805190602001201480610b89575083805190602001208180519060200120145b610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf90611815565b60405180910390fd5b5f6040518060e001604052808881526020018781526020018681526020018581526020018481526020018381526020014281525090505f81908060018154018082558091505060019003905f5260205f2090600702015f909190919091505f820151815f01556020820151816001019081610c4391906119d0565b506040820151816002019081610c5991906119d0565b50606082015181600301556080820151816004015560a0820151816005019081610c8391906119d0565b5060c08201518160060155505081604051610c9e9190611ad9565b604051809103902085604051610cb49190611ad9565b604051809103902087604051610cca9190611ad9565b60405180910390207f87e9bc53e733fada208e5dd596e2d6722bcf82899afd815db4cc1ed3d1444073878742604051610d0593929190611aef565b60405180910390a450505050505050565b5f8181548110610d24575f80fd5b905f5260205f2090600702015f91509050805f015490806001018054610d499061157f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d759061157f565b8015610dc05780601f10610d9757610100808354040283529160200191610dc0565b820191905f5260205f20905b815481529060010190602001808311610da357829003601f168201915b505050505090806002018054610dd59061157f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e019061157f565b8015610e4c5780601f10610e2357610100808354040283529160200191610e4c565b820191905f5260205f20905b815481529060010190602001808311610e2f57829003601f168201915b505050505090806003015490806004015490806005018054610e6d9061157f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e999061157f565b8015610ee45780601f10610ebb57610100808354040283529160200191610ee4565b820191905f5260205f20905b815481529060010190602001808311610ec757829003601f168201915b5050505050908060060154905087565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610f5382610f0d565b810181811067ffffffffffffffff82111715610f7257610f71610f1d565b5b80604052505050565b5f610f84610ef4565b9050610f908282610f4a565b919050565b5f67ffffffffffffffff821115610faf57610fae610f1d565b5b610fb882610f0d565b9050602081019050919050565b828183375f83830152505050565b5f610fe5610fe084610f95565b610f7b565b90508281526020810184848401111561100157611000610f09565b5b61100c848285610fc5565b509392505050565b5f82601f83011261102857611027610f05565b5b8135611038848260208601610fd3565b91505092915050565b5f6020828403121561105657611055610efd565b5b5f82013567ffffffffffffffff81111561107357611072610f01565b5b61107f84828501611014565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f819050919050565b6110c3816110b1565b82525050565b5f6110d483836110ba565b60208301905092915050565b5f602082019050919050565b5f6110f682611088565b6111008185611092565b935061110b836110a2565b805f5b8381101561113b57815161112288826110c9565b975061112d836110e0565b92505060018101905061110e565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6111a382611171565b6111ad818561117b565b93506111bd81856020860161118b565b6111c681610f0d565b840191505092915050565b5f6111dc8383611199565b905092915050565b5f602082019050919050565b5f6111fa82611148565b6112048185611152565b93508360208202850161121685611162565b805f5b85811015611251578484038952815161123285826111d1565b945061123d836111e4565b925060208a01995050600181019050611219565b50829750879550505050505092915050565b5f60e0820190508181035f83015261127b818a6110ec565b9050818103602083015261128f81896111f0565b905081810360408301526112a381886111f0565b905081810360608301526112b781876110ec565b905081810360808301526112cb81866110ec565b905081810360a08301526112df81856111f0565b905081810360c08301526112f381846110ec565b905098975050505050505050565b61130a816110b1565b82525050565b5f6020820190506113235f830184611301565b92915050565b611332816110b1565b811461133c575f80fd5b50565b5f8135905061134d81611329565b92915050565b5f6020828403121561136857611367610efd565b5b5f6113758482850161133f565b91505092915050565b5f82825260208201905092915050565b5f61139882611171565b6113a2818561137e565b93506113b281856020860161118b565b6113bb81610f0d565b840191505092915050565b5f60e0820190506113d95f83018a611301565b81810360208301526113eb818961138e565b905081810360408301526113ff818861138e565b905061140e6060830187611301565b61141b6080830186611301565b81810360a083015261142d818561138e565b905061143c60c0830184611301565b98975050505050505050565b5f805f805f8060c0878903121561146257611461610efd565b5b5f61146f89828a0161133f565b965050602087013567ffffffffffffffff8111156114905761148f610f01565b5b61149c89828a01611014565b955050604087013567ffffffffffffffff8111156114bd576114bc610f01565b5b6114c989828a01611014565b94505060606114da89828a0161133f565b93505060806114eb89828a0161133f565b92505060a087013567ffffffffffffffff81111561150c5761150b610f01565b5b61151889828a01611014565b9150509295509295509295565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061159657607f821691505b6020821081036115a9576115a8611552565b5b50919050565b5f81905092915050565b5f819050815f5260205f209050919050565b5f81546115d78161157f565b6115e181866115af565b9450600182165f81146115fb576001811461161057611642565b60ff1983168652811515820286019350611642565b611619856115b9565b5f5b8381101561163a5781548189015260018201915060208101905061161b565b838801955050505b50505092915050565b5f61165682846115cb565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611698826110b1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116ca576116c9611661565b5b600182019050919050565b7f47616d6520726573756c74206e6f7420666f756e6400000000000000000000005f82015250565b5f61170960158361137e565b9150611714826116d5565b602082019050919050565b5f6020820190508181035f830152611736816116fd565b9050919050565b7f496e76616c696420706c61796572206e616d65730000000000000000000000005f82015250565b5f61177160148361137e565b915061177c8261173d565b602082019050919050565b5f6020820190508181035f83015261179e81611765565b9050919050565b7f57696e6e6572206d757374206265206f6e65206f662074686520706c617965725f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f6117ff60218361137e565b915061180a826117a5565b604082019050919050565b5f6020820190508181035f83015261182c816117f3565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261188f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611854565b6118998683611854565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6118d46118cf6118ca846110b1565b6118b1565b6110b1565b9050919050565b5f819050919050565b6118ed836118ba565b6119016118f9826118db565b848454611860565b825550505050565b5f90565b611915611909565b6119208184846118e4565b505050565b5b81811015611943576119385f8261190d565b600181019050611926565b5050565b601f8211156119885761195981611833565b61196284611845565b81016020851015611971578190505b61198561197d85611845565b830182611925565b50505b505050565b5f82821c905092915050565b5f6119a85f198460080261198d565b1980831691505092915050565b5f6119c08383611999565b9150826002028217905092915050565b6119d982611171565b67ffffffffffffffff8111156119f2576119f1610f1d565b5b6119fc825461157f565b611a07828285611947565b5f60209050601f831160018114611a38575f8415611a26578287015190505b611a3085826119b5565b865550611a97565b601f198416611a4686611833565b5f5b82811015611a6d57848901518255600182019150602085019450602081019050611a48565b86831015611a8a5784890151611a86601f891682611999565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f611ab382611171565b611abd8185611a9f565b9350611acd81856020860161118b565b80840191505092915050565b5f611ae48284611aa9565b915081905092915050565b5f606082019050611b025f830186611301565b611b0f6020830185611301565b611b1c6040830184611301565b94935050505056fea26469706673582212203689f94d7db717414c93739ac0ece677518833b8e2e7d3d17bf59a421a0cb37d64736f6c634300081a0033",
        abi: contractAbi,
        account,
      });

      // POST the address to the specified endpoint
      try {
        const updateResponse = await fetch('http://base:8000/api/matches/update-contract-address', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ address }),
        });
      
        if (!updateResponse.ok) {
          console.error("Failed to update contract address");
        } else {
          console.log("Contract address updated successfully");
        }
      } catch (err) {
        console.error("Error updating contract address:", err);
      }
    }

    // Get the contract instance
    contract = getContract({
      client,
      chain,
      address,
      abi: contractAbi,
    });

    console.log("Contract initialized at address:", address);
  } catch (err) {
    console.error("Error initializing contract: ", err);
    process.exit(1); // Exit process if contract initialization fails
  }
};

// Define the async route handler
const storeGameResult: express.RequestHandler = async (req, res) => {
  try {
    const {id, player1, player2, score1, score2, winner } = req.body;
    if (!player1 || !player2 || score1 === undefined || score2 === undefined || !winner) {
      res.status(400).json({ error: "Invalid game result data" });
      return;
    }

    const transaction = prepareContractCall({
      contract,
      method: "function storeGameResult(uint256 _id,string memory _player1,string memory _player2,uint256 _score1,uint256 _score2,string memory _winner)",
      params: [id, player1, player2, score1, score2, winner],
    });
    if (!transaction) {
      res.status(500).json({ error: "Failed to prepare transaction" });
      return;
    }

    const data = await sendAndConfirmTransaction({
      transaction,
      account,
    });
    if (!data.transactionHash) {
      res.status(500).json({ error: "Failed to store game result" });
      return;
    }

    console.log("Game result stored on blockchain!: ", data.transactionHash);
    res.json({
      message: "Game result stored successfully",
      status: "success",
      transactionHash: data.transactionHash,
    });
  } catch (err) {
    console.error("Error storing game result: ", err);
    res.status(500).json({ error: "Failed to store game result" });
  }
};

const getContractAddress: express.RequestHandler = (req, res) => {
  res.json({ 
    address: contract.address,
    abi: contractAbi,
    status: "success",
  });
};

// Set up the endpoint to store game results
app.post('/store_results', storeGameResult);
app.get('/get_contractAddress', getContractAddress);

// Initialize the contract and start the server
initContract().then(() => {
  app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
  });
}).catch(err => {
  console.error("Error during initialization: ", err);
});

